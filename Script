const oracledb = require('oracledb');
// const cron = require('node-cron');

// Initialize Oracle Client
oracledb.initOracleClient({
    libDir: 'C:\\Instant_client\\instantclient_12_1 1\\instantclient_12_1',
});

// Database connection configuration
const config = {
  
};

async function fetchData() {
    let connection;

    try {
        // Connect to the database
        connection = await oracledb.getConnection(config);

        // Query to fetch data from the table where status = 1
        const result = await connection.execute(
            'SELECT * FROM LOM.NCR_LOM_EDI855B WHERE status = 1',
        );

        // Extract and log only the rows
        const jsonData = result.rows.map(row => {
            console.log(row); // Log each row to verify its structure
            return {
                assignedTo: "Customer Services",  // Mapped directly
                msc: "MSPDEF",                   // Mapped directly
                workOrder: row[33],              // Mapped to workOrder
                entryId: row[32],                // Mapped to entryId
                supplierComments: row[8],        // Mapped to supplierComments
                type: "Def no Stock",            // Mapped directly
                ncrPoNumber: row[9],             // Mapped to ncrPoNumber
                poOrderQty: row[12],             // Mapped to poOrderQty
                ncrPNOrderd: row[11],            // Mapped to ncrPNOrderd
                status: row[6]                   // Mapped to status
            };
        });

        console.log(jsonData); // Log the final jsonData to verify the output

        // Update the target table with the fetched data
        for (const data of jsonData) {
            if (data.entryId !== null) {
                await connection.execute(
                    `UPDATE NCR_LOM_Do_OutStanding_Orders
                     SET assigned_to = :assignedTo,              -- Mapped field
                         msc_code = :msc,                        -- Mapped field
                         work_order_number = :workOrder,         -- Mapped field
                         entry_id_ref = :entryId,                -- Mapped field
                         supplier_comments_text = :supplierComments,  -- Mapped field
                         issue_type = :type,                     -- Mapped field
                         po_number = :ncrPoNumber,               -- Mapped field
                         order_quantity = :poOrderQty,           -- Mapped field
                         pn_ordered = :ncrPNOrderd,              -- Mapped field
                         order_status = :status                  -- Mapped field
                     WHERE entry_id_ref = :entryId`,             -- Mapped field
                    {
                        assignedTo: data.assignedTo,
                        msc: data.msc,
                        workOrder: data.workOrder,
                        entryId: data.entryId,
                        supplierComments: data.supplierComments,
                        type: data.type,
                        ncrPoNumber: data.ncrPoNumber,
                        poOrderQty: data.poOrderQty,
                        ncrPNOrderd: data.ncrPNOrderd,
                        status: data.status
                    },
                    { autoCommit: false } // Disable autoCommit for batch processing
                );

                // Update the status in LOM.NCR_LOM_EDI855B to 2
                await connection.execute(
                    `UPDATE LOM.NCR_LOM_EDI855B
                     SET status = 2
                     WHERE entryId = :entryId`,
                    { entryId: data.entryId },
                    { autoCommit: false } // Disable autoCommit for batch processing
                );
            }
        }

        // Commit the transaction after all updates
        await connection.commit();

        console.log('Data updated successfully');
    } catch (err) {
        console.error('Error fetching or updating data:', err);
    } finally {
        if (connection) {
            try {
                // Close the database connection
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
}

fetchData();

// Schedule the fetchData function to run every 5 minutes
// cron.schedule('*/5 * * * *', fetchData);
